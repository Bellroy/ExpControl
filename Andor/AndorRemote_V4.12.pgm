cls()
print ("==============================================================")
print("       ExperimentControl  -  AndorRemoteScript")
print ("==============================================================")

thisCamera=GetSerialNumber()
thisCamera$=str$(thisCamera)

path$="Z:\singleatoms\data\"
if (thisCamera == 8187) then path$="Z:\singleatoms\temp\"
iniFilename$=path$;thisCamera$;"_remote.ini"
output(1250,850,600,200)



print("camera serial number: ",thisCamera)
//print("config filename:      ",filename$)

:rem
:rem default settings
:rem

SetAcquisitionMode(3) :rem Kinetics
SetTriggerMode(1)     :rem 0: internal 1:external triggering
SetDataType(1)		  :rem Counts
SetShutter(0,0)		  :rem always open

vsSpeed  = GetFastestRecommendedVSSpeed()
amp = 0 // alwaays keep 0
hsSpeed = GetNumberHSSpeeds(amp)  

select case thisCamera
	case 2257  // iXon MOT
		SetTriggerMode(1)     :rem 0: internal 1:external triggering
		break
	case 8188  // iKon Lattice
		SetTriggerMode(1)     :rem 0: internal 1:external triggering
		SetTemperature (-80)
		cooler (1)
		SetFanMode(0) // 0: high, 1: low, 2: off
		readoutSpeed = 2
		SetHSSpeed(readoutSpeed) 
		SetVSSpeed(vsSpeed)
		break
	case 3364  // iXon flourescence red
		SetTriggerMode(1)     :rem 0: internal 1:external triggering
		break
	case 4656  // iXon fluorescence blue
		SetTriggerMode(1)     :rem 0: internal 1:external triggering
		break
	case 4376  // iXon DU885 - test camera (used in preparation lab)
		SetTriggerMode(0)     :rem 0: internal 1:external triggering
		SetTemperature (-80)
		cooler (1)
		SetFanMode(0) // 0: high, 1: low, 2: off
		break
	case 8187 //  2nd ikon (used in preparation lab)
		SetTriggerMode(0)     :rem 0: internal 1:external triggering
		SetTemperature (-80)
		cooler (1)
		SetFanMode(0) // 0: high, 1: low, 2: off
		readoutSpeed = 2
		SetHSSpeed(readoutSpeed) 
		SetVSSpeed(vsSpeed)
		break
selend

print ("Shift speed:";getvsspeed(vsSpeed);" µs, ReadoutRate: ";GetHSSpeed(amp,readoutSpeed);" MHz")
SetOutputAmp (!enableEMCCD)
if enableEMCCD then 
	SetGain (EMCCDgain)
	print ("EMCCDgain: ";EMCCDgain)
endif

while 1

print ("==============================================================")

gosub .SUBwaitUntilIniFileAppears
gosub .SUBparseIniFile


nPictures = picturesPerRepetition * nRepetitions

for cycleNo = 1 to nCycles
	gosub .SUBsetAcquisitionParameters 
	run()
	if IsDataSet (0) then MoveWindow(#0, 0, 0, 700, 800)

	suffix$=""
	gosub .SUBcalculateROIforEvaluation
	select case imageProcessing
    	case 1 // divide pictures
			gosub .SUBdividePix
			gosub .SUBsaveData

			break
		case 2 // ssubtract pictures
			gosub .SUBsubtractPix
			gosub .SUBsaveData
	    	break
	    case 3 // exponate pictures
			gosub .SUBexponatePix
			gosub .SUBsaveData
	    	break
	    case 4  // sum pictures
	    	break
	    case else
	    	copy (#0,#100)
	    	break
	selend

	MoveWindow(#100, 800, 0, 700, 800)
	scale (#100, xFrom, xTo, yFrom, yTo)
	
	if pixelCount then
		gosub .SUBpixelCount
	endif

	if saveRawData then 
		suffix$ = "_raw"
		gosub .SUBcreateFilename
		save(#0,filename$)
		CloseWindow (#1)
	endif

next // for cycle...
	
kill(iniFilename$)

wend

end


rem
rem
rem
.SUBcreateFilename
    if (nCycles > 1) then
		filename$ = dataPath$;suffix$;"_";right$("000";str$(cycleNo),3);".sif"
	else
	    filename$ = dataPath$;suffix$;".sif"
	endif
	print ("Saving ";filename$)
return


rem
rem
rem
.SUBsaveData
    gosub .SUBcreateFilename
	save(#100,filename$)
	print ("Done")
return

rem
rem
rem
.SUBsetAcquisitionParameters
if takeSubimage then
	subXFrom = subimageCenterX-subimageSizeX/2
	subXTo = subimageCenterX+subimageSizeX/2-1
	subYFrom = subimageCenterY-subimageSizeY/2
	subYTo = subimageCenterY+subimageSizeY/2-1
else
	subXFrom = 1
	subYFrom = 1
	subXTo = detectorx()
	subYTo = detectory()
endif
print ("Taking ";nPictures;" Pictures (";cycleNo;" of ";nCycles;")... (";subXFrom;",";subYFrom;")->(";subXTo;",";subYTo;"), ";binsize;"x";binsize;" bin,",exposureTime;" ms exposure")
SetImage(subXFrom, subXTo, binsize, subYFrom, subYTo, binsize)
if IsDataset(0) then scale(#0, subXFrom, subXTo, subYFrom, subYTo)
SetExposureTime(exposureTime/1000)
SetKineticNumber(nPictures)

return


rem
rem  calculate region of interest for evaluation of data
rem
.SUBcalculateROIforEvaluation
if evaluateSubimage then
	xFrom = evalCenterX-evalSizeX/2
	xTo = evalCenterX+evalSizeX/2-1 
	yFrom = evalCenterY-evalSizeY/2
	yTo = evalCenterY+evalSizeY/2-1
else
	if takeSubimage then
		xFrom = subXFrom
		yFrom = subYFrom
		xTo = subXTo
		yTo = subYTo
	else
		xFrom = 1
		yFrom = 1
		xTo = detectorx()
		yTo = detectory()
	endif
endif

return


:rem
:rem   dividePictures
:rem
.SUBdividePix

print ("Dividing pictures...(";xFrom;",";yFrom;")-->(";xTo;",";yTo;")")
create(#100,"Picture Series",xTo-xFrom+1,yTo-yFrom+1,nRepetitions)
for j = 1 to nRepetitions
  i = (j-1)*3 + 1
  #100_sig{j}=abs((#0_sig{i}[xFrom<<xTo,yFrom<<yTo]-#0_sig{i+2}[xFrom<<xTo,yFrom<<yTo])/(#0_sig{i+1}[xFrom<<xTo,yFrom<<yTo]-#0_sig{i+2}[xFrom<<xTo,yFrom<<yTo]))
next

suffix$="_div" : rem is appended to the filename
return


:rem
:rem   subtract Pictures
:rem
.SUBsubtractPix

print ("Subtracting pictures...(";xFrom;",";yFrom;")-->(";xTo;",";yTo;")")
create(#100,"Picture Series",xTo-xFrom+1,yTo-yFrom+1,nRepetitions)
for j = 1 to nRepetitions
  i = (j-1)*2 + 1
  #100_sig{j}=#0_sig{i}[xFrom<<xTo,yFrom<<yTo]-#0_sig{i+1}[xFrom<<xTo,yFrom<<yTo]
next

suffix$="_subtr" : rem is appended to the filename
return



:rem
:rem   exponate Pictures
:rem
.SUBexponatePix

print ("Exponating pictures...(";xFrom;",";yFrom;")-->(";xTo;",";yTo;")")
create(#100,"Exponated",xTo-xFrom+1,yTo-yFrom+1,nRepetitions)
scaleFactor=10000
for j = 1 to nRepetitions
  #100_sig{j}=exp(-#0_sig{j}[xFrom<<xTo,yFrom<<yTo]/scaleFactor)
next

suffix$="_exp" : rem is appended to the filename
return


:rem
:rem   pixelCount
:rem
.SUBpixelCount

print ("Pixel count...(";xFrom;",";yFrom;")-->(";xTo;",";yTo;")")
suffix$="pixelCount"
if (nCycles > 1) then
	filename$ = dataPath$;suffix$;"_";right$("000";str$(cycleNo),3);".txt"
else
	filename$ = dataPath$;suffix$;".txt"
endif

print ("Saving ";filename$)
kill (filename$)


for j = 1 to nRepetitions
	sum = 0
	for x = xFrom to xTo
		for y = yFrom to yTo
			sum = sum + #100_sig{j}[x,y]
		next //y
	next //x
	print (j, "sum = ";sum);
	write (filename$, j, sum)
next //j
close ()
return





:rem
:rem     waits until the file 'filename$' appears
:rem
.SUBwaitUntilIniFileAppears
err=-4
print ("Waiting for ";iniFilename$;"...";)
while (err==-4)
   err=read(iniFilename$,line$)
wend
return


:rem
:rem     parsing the .ini file
:rem
.SUBparseIniFile
a=0
takeSubimage = 0
evaluateSubimage = 0
saveRawData = 0
nCycles = 1
pixelCount = 0
while(a==0)
    a=read(iniFilename$,line$)
    //print("read:",line$)
    pos = instr(line$,"=")
    strlen = len(line$)
    if (pos > 2) then
	    tag$=left$(line$,pos-2)
	    value$=right$(line$,strlen-pos-1)
	    if (asc(value$)==34) then
	        value$=mid$(value$,2,len(value$)-2)
	    endif
	else 
	    tag$=""
	endif
	value=val(value$)
	
	if (!strcomp(tag$,"exposureTime_ms",0)) then exposureTime=value
	if (!strcomp(tag$,"picturesPerRepetition",0)) then picturesPerRepetition = value
	if (!strcomp(tag$,"nRepetitions",0)) then nRepetitions = value
	if (!strcomp(tag$,"nCycles",0)) then nCycles = value
	if (!strcomp(tag$,"pixelCount",0)) then pixelCount = value
	if (!strcomp(tag$,"EMCCDgain",0)) then EMCCDgain = value
	if (!strcomp(tag$,"enableEMCCD",0)) then enableEMCCD = value
	if (!strcomp(tag$,"takeSubimage",0)) then takeSubimage = value
	if (!strcomp(tag$,"subimageCenterX",0)) then subimageCenterX = value
	if (!strcomp(tag$,"subimageCenterY",0)) then subimageCenterY = value
	if (!strcomp(tag$,"subimageSizeX",0)) then subimageSizeX = value
	if (!strcomp(tag$,"subimageSizeY",0)) then subimageSizeY = value
	if (!strcomp(tag$,"binsize",0)) then binsize = value

	if (!strcomp(tag$,"evaluateSubimage",0)) then evaluateSubimage = value
	if (!strcomp(tag$,"fullROI",0)) then fullROI = value
	if (!strcomp(tag$,"evaluateCenterX",0)) then evalCenterX = value
	if (!strcomp(tag$,"evaluateCenterY",0)) then evalCenterY = value
	if (!strcomp(tag$,"evaluateSizeX",0)) then evalSizeX = value
	if (!strcomp(tag$,"evaluateSizeY",0)) then evalSizeY = value
	if (!strcomp(tag$,"startNo",0)) then startNo = value
	if (!strcomp(tag$,"imageProcessing",0)) then imageProcessing = value
	
	if (!strcomp(tag$,"dataPath",0)) then 
		pos=1
		while (pos != 0)
		    // change all "\\" into "\"
		    pos = instr(value$,"\\")
		    if (pos != 0) then value$=left$(value$,pos);right$(value$,len(value$)-pos-1)
		wend
		dataPath$ = value$;"_";thisCamera$
	endif
	if (!strcomp(tag$,"saveRawData",0)) then saveRawData = value
	
	
wend
close ()


return

